Bugbyte ZXDB - 1982 - Disassembly with (some?) comments
=======================================================
Notes: 
1) basic program loads as normal, line 1 contains REM statement with program code, line 10 PRINT USR 16640   (0x4100) is the main entry point (not 16514 (0x4082) which is the start of the code after REM on line 1)
2) Trying to build this up incrementatlly starting with just what subroutines are called and the start end addresses
3) ^^ denotes jup back up to address above this (below in memory address terms)
4) == denote a gap in code between subroutines or not looked at
5) => denotes 
6) Used this to help, ZX81 rom disassembly, https://k1.spdns.de/Vintage/Sinclair/80/Sinclair%20ZX81/ROMs/zx81%20version%202%20'improved'%20rom%20disassembly%20(Logan,%20O'Hara).html

4082 PUSH AF      ;;;;; 4082 => 409A    not sure yet what this routine does, others (409B, 40A5 jump midway in)
4083 PUSH HL      ;;;;;                 called from a subroutine at 416F, may be a code copier
4084 PUSH DL
4085 PUSH BC
4086 LD HL,(401E)
4089 CP 73
408B JR Z,409B
408D CP 72
408F JR Z,40A5
4091 LD HL,A      ;;; ZADB DISASSEMBLY SHOWS LD M,A (INSTRUCTIONS SAY M IS HL)
4092 INC HL
4093 LD (401E),HL
4096 POP BC
4097 POP DE
4098 POP HL
4099 POP AF
409A RET
==============================
...
40A3 => JR 4093 ^^
...
40B8 => JR 4096 ^^

40BC => 40F5   looks like a display routine and also reads key, manuall reading 4025 (FRAMES+1??), 4027 DEBOUNCE STATUS, 4025 - READ LAST KEY PRESSED, calls 0229 Main ROM display routine)

40F6 LD HL,(4004) ;; LOAD HL WITH 16388 WHICH IS RAMTOP SYSTEM VARIABLE
40F9 LD SP,FFEC   ;; LOAD STACK POINTER WITH 65515 - NOT SURE WHY?
40FC ADD SP       ;; ADD SP INSTRUCTION JUST ADDS SP TO THE ACCUMALATOR A
40FD LD SP, HL    ;; STORE THE ADDRESS POINTED TO BY "RAMTOP" IN STACK POINTER
40FE JR 4103      ;; JUMP BACK TO ONE INSTRUCTION AFTER THE MAIN PROGRAM START
===============================
4100 JP 40F6      ;; 4100 => 4169   main program code
4103 LD A, C5     ;; LOAD A WITH 197 (INSTRUCTION CODE PUSH BC, SELF MODIFIYING CODE??)
4105 LD (416F),A  ;; STORE A IN ADDRESS 416F
4108 CALL 4BB0    
410B LA A, 17
410D CALL 416F
4110 CALL 416A
4113 LD A,B
4114 CALL 416F
4117 CALL 4BB0
411A LD A,B
411B CP 27         ;; COMPARE A WITH "B" CHARACTER
411D JP Z,4980     ;; HANDLE B COMMAND - SET A BREAKPOINT
4120 CP 29         ;; COMPARE A WITH "D" CHARACTER
4122 JP Z,44E2     ;; HANDLE D COMMAND - DISASSEMBLE
4125 CP 38         ;; COMPARE A WITH "S" CHARACTER
4127 JP Z,41BF     ;; HANDLE S COMMAND - SEARCH MEMORY
412A CP 26         ;; COMPARE A WITH "A" CHARACTER
412C JP Z,4228     ;; HANDLE A COMMAND - VIEW MEMORY AS CHARACTERS
412F CP 36         ;; COMPARE A WITH "Q" CHARACTER
4131 JP Z, 46C2    ;; HANDLE "quit" COMMAND
4134 CP 2C         ;; COMPARE A WITH "G" CHARACTER
4136 JP Z, 415F    ;; HANDLE "EXECUTE CODE" COMMAND
4139 CP 2B         ;; COMPARE A WITH "F" CHARACTER
4138 JP Z, 4262    ;; HANDLE "FILL BLOCK OF MEMORY" COMMAND
4152 CP 3B         ;; COMPARE A WITH "V" CHARACTER
4154 JP Z, 4185    ;; HANDLE "VIEW MEMORY AS HEX" COMMAND
4157 LD A, 0F      ;; LOAD A WITH "?" CHARACTER
4159 CALL 416F
415C JP 4100       ;; RESTART FROM 4100
415F CALL 417A
4169 RET
====================
416F PUSH BC
4170 CALL 4082     ;; THIS IS THE CODE AT START OF BASIC REM 16514
4173 POP BC
4174 RET
====================
4175 NOP           ;; PRESUMABLY A BIT OF PADDING JUST IN CASE EXTRA CODE NEEDED?
4176 NOP
4177 NOP
4178 NOP
4179 NOP
417A CALL 4BB0
417D LD A, 14      ;; LOAD A WITH "=" WHICH IS THE PROMPT TO ENTER AN ADDRESS

==========================================
4BB0 LD A,72       ;; (NOT SURE SIGNIFICANCE OF HEX 72, IS ALSO CODE FOR INSTRUCTION LD (HL),D ??)
4BB2 CALL 416F     ;; THIS CALL OR JUMP 416F HAPPENS A LOT!!!
4BB5 LD A,73       ;; (NOT SURE SIGNIFICANCE OF HEX 73, IS ALSO CODE FOR INSTRUCTION LD (HL), E??)
4BB7 JP 416F       
4BBA LD A,H
4BBB CALL 4BBF
4BBE LD A,L
4BBF PUSH AF
4BCO RRCA          ;; 8 BIT ROTATION BIT RIGHT LEAVING RIGHT COPIED TO BIT 7
4BC1 RRCA
4BC2 RRCA
4BC3 RRCA
4BC4 CALL 4BC8
4BC7 POP AF
4BC8 AND 0F
4BCA ADD 1C
4BCC JP 416F
4BCF LD L, 32
4BD1 NOP
4BD2 NOP
4BD3 NOP
4BD4 LD C, 08     ;; THE RAW DISASSEMBLY USING ZXDB SHOWED LD A,M  ; TAPE INLAY SAID M = HL??
4BD6 LD A, M
4BD7 INC HL
4BD8 CALL 4BBF
4BDB CALL 4BE5
4BDE DEC C
4BDF JP NZ, 4BD6
4BE2 JP 4BB0      ;; JUMPING BACK TO START OF THIS SUBROUTINE
4BE5 LD A,00
4BE7 JP 416F
4BEA LD HL,(42FC)
4BED INC HL
4BEE LD C,HL      ;; AGAIN ZXDB DISASSEMBLE HAS LD C,M
4BEF LD (42FC),HL
4BF2 CALL 47CB
4BF5 LD A,C
4BF6 RET
========================







Brief Instructions - commands
=============================
Q - leave ZXDB
G - execute program (if you put jp 4100 at end of your own code it will return to ZXDB
V - view memory in Hex
A - line of 32 bytes displayed as characters
W - sets a window = number of lines to be used (use when single steppign)
F - Fill a block of memory > value to be placed = start block = end of block
E - Hex loader - write to memory
C - compare two blocks of memory = start of first , end, start of second block
M - Move a block of memory (start, end, start of second)
D - disassemble
S - Searh memory (list of two digit hex seperated by "." then enter the address to start from at =
    -- typing C will pause allowing replace string in memory
B - set a breakpoint (breakpoint address followed by address to start program execution
    -- sub commands 
        - G let program continue normally
        - nW set memory window to n
        - R after a CALL executes the subroutine then returns back to single step
        - Q quites back to *
        - L sets breakpoint to current (3 byte only) instruction
        - O display only mnumonics of the ibnstruction
        -nN runs the next n instructions in single step
        - Z lets you set registers
	- nT program only single steps when a 16bit register contains n or a memory ref is made to n


